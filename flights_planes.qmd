---
title: "'nycflights13' 보고서"
title-slide-attributes: 
  data-background-image: images/ua_dep.png
  data-background-size: cover
  data-background-opacity: "0.5"  # 배경 투명도 조절
  data-font-size: 48px  # 🔥 기본 글자 크기 조절 (제목, 부제목, 저자 포함)
author: "Team F5 : 정의주, 한지수, 신태선"
subtitle: "UA 항공의 제조사별 출발 지연 분석"
format:
  revealjs:
    footer: "© 2025 Team F5"
    logo: "images/logo.png"
    slide-number: true
    theme: night  # 내장 테마 적용
    html: 
      code-fold: true  # (선택) 코드 접기 기능 추가
execute:
  echo: true  # 기본적으로 코드와 결과 모두 표시
  warning: false  # (선택) 경고 메시지 숨기기
css: styles.css  # 🔥 CSS 파일 적용
---

```{python}
#| echo : false 
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from nycflights13 import flights, planes

```

## 1. 운항 지연 분석 배경 {.text-center}

::: {.callout-note appearance="simple"}

### ✈️ UA 항공사 항공기 지연 분석
- **어떤 제조사의 항공기가 지연을 자주 유발하는가?**  
- **운항 효율성을 향상시키기 위한 방안은 무엇인가?**
:::

![](./images/catoon.png){width=800 height=400}

## 2.1 데이터 정보

::: {.column width="50%" style="margin-top:100px;"}
```{python}
flights.info()
```
:::
::: {.column width="50%" style="margin-top:100px;"}

```{python}
planes.info()
```
:::

## 2.2 데이터 전처리

- 두 데이터를 tailnum 기준으로 병합하여 기체별 제조사 정보를 결합
```{python}
# tailnum을 key로 merge 하기 
df = pd.merge(flights, planes, on = 'tailnum', how='left')
print("병합된 데이터 :", len(df))
```

```{python}
#| echo : false 

# 항공사별 운항 편
flight = flights.groupby('carrier')['flight'].nunique().reset_index()
flight_sorted = flight.sort_values(by='flight', ascending=False)

# 시각화
plt.figure(figsize=(10, 2))
plt.bar(flight_sorted['carrier'], flight_sorted['flight'], color='skyblue')

plt.xlabel("Airline", fontsize=15, fontweight='bold')
plt.ylabel("Number of Flights", fontsize=15, fontweight='bold')
plt.title("Number of Flights by Airline", fontsize=20, fontweight='bold')
plt.xticks(rotation=45)
plt.show()
```

- UA 항공사(우리 회사: 운행량 1위) 데이터만 가져오기
```{python}
df  = df[df['carrier']=='UA']
df_len = len(df)
print("UA 항공사의 운행량 :", df_len)
```

## 2.3 날짜 및 시간 데이터 추가
- 연, 월, 일, 시, 분 데이터를 조합해 date_time 생성
```{python}
df['date_time'] = pd.to_datetime(df['year_x'].astype(str) + '-' + df['month'].astype(str) + '-' + df['day'].astype(str) + ' ' + df['hour'].astype(str) + ':' + df['minute'].astype(str))
```

- 2013년 1월~6월(상반기) 데이터를 필터링
```{python}
df_fh =df
#df_fh = df[(df['date_time'] >= '2013-01-01') & (df['date_time'] <= '2013-06-30')]
#first_half = len(df_fh)
#print("f {df_len}=>{fisrt_half}")
```

- 빠른 이륙은 지연 원인이 아니므로 0으로 변경
```{python}

#0보다 작으면 0이라고 하기 
df_fh['dep_delay'] = df_fh['dep_delay'].apply(lambda x: 0 if x < 0 else x)

zero_df_fh = len(df_fh)
# 변환 후 데이터 크기 출력
print(zero_df_fh)
```

## 2.4 이상치 제거

- 이상치 제거를 위한 IQR(Interquartile Range) 계산

```{python}
Q1 = df_fh['dep_delay'].quantile(0.25)
Q3 = df_fh['dep_delay'].quantile(0.75)
IQR = Q3 - Q1


lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

df_fh = df_fh[(df_fh['dep_delay'] >= lower_bound) & (df_fh['dep_delay'] <= upper_bound)]
iqr_del_df = len(df_fh)

print(Q1, Q3)
print("f {zero_df_fh} => {iqr_del_df}")
```

## 3.1 제조사별 평균 및 중앙값 지연 시간 분석  

::: {.callout-note appearance="simple"}
### ⏳ 제조사별 평균 지연 시간 & 중앙값 지연 시간 비교  
- **특정 제조사의 항공기가 평균적으로 더 오랫동안 지연되는가?**  
- **평균(Mean)과 중앙값(Median)을 비교하여 이상치(outlier)의 영향을 확인**  
:::

::: {.cell}
```{python}
#| echo: false
#| fig-align: "center"

# 0을 제외한 데이터 사용
filtered_df = df_fh[df_fh['dep_delay'] > 0]

# 제조사별 평균 및 중앙값 계산 및 정렬
manufacturer_stats = filtered_df.groupby('manufacturer')['dep_delay'].agg(['mean', 'median']).sort_values(by='mean', ascending=False)

# 보잉(Boeing)을 가장 먼저 정렬
if 'BOEING' in manufacturer_stats.index:
    manufacturer_stats = manufacturer_stats.reindex(['BOEING'] + [m for m in manufacturer_stats.index if m != 'BOEING'])

# 전체 제조사의 평균 및 중앙값 평균 계산
mean_avg = manufacturer_stats['mean'].mean()
median_avg = manufacturer_stats['median'].mean()

# 시각화
fig, axes = plt.subplots(1, 2, figsize=(12, 4.5))

# 평균값 그래프
sns.barplot(x=manufacturer_stats.index, y=manufacturer_stats['mean'], ax=axes[0], palette='pastel')
axes[0].axhline(mean_avg, color='red', linestyle='--', label=f'Mean Avg: {mean_avg:.1f}')
axes[0].set_title('Aircraft Manufacturer Delay (Mean)')
axes[0].set_ylabel('Average Delay (minutes)')
axes[0].set_xticklabels(axes[0].get_xticklabels(), rotation=45, ha='right')
axes[0].legend()

# 중앙값 그래프
sns.barplot(x=manufacturer_stats.index, y=manufacturer_stats['median'], ax=axes[1], palette='pastel')
axes[1].axhline(median_avg, color='blue', linestyle='--', label=f'Median Avg: {median_avg:.1f}')
axes[1].set_title('Aircraft Manufacturer Delay (Median)')
axes[1].set_ylabel('Median Delay (minutes)')
axes[1].set_xticklabels(axes[1].get_xticklabels(), rotation=45, ha='right')
axes[1].legend()

plt.tight_layout()
plt.show()
```
:::


## 3.2  제조사 데이터 처리

::: {.callout-note appearance="simple"}
### UA 항공사가 운행하는 비행기의 제조사의 비율
:::

```{python}
#| echo: false
#| fig-align: "center"

manufacturer_counts = df_fh['manufacturer'].value_counts()

# 제조사 이름과 운항 횟수를 함께 표시
labels = [f"{manufacturer} ({count})" for manufacturer, count in zip(manufacturer_counts.index, manufacturer_counts.values)]


plt.figure(figsize=(5, 5))
plt.pie(manufacturer_counts, labels=labels, autopct='%1.1f%%', startangle=140, colors=sns.color_palette('pastel'))
plt.title('Aircraft Manufacturer Distribution for Our Airline')
plt.show()
```

## 3.3 제조사별 지연 발생 빈도 분석  

::: {.callout-note appearance="simple"}
### 🚀 제조사별 지연 발생 횟수 및 비율  
- **어떤 제조사의 항공기가 가장 많이 지연되는가?**  
- **전체 운항 대비 지연 비율은 제조사별로 차이가 있는가?**  
:::

```{python}
#| echo: false
#| fig-align: "center"

import matplotlib.pyplot as plt
import seaborn as sns

# 지연 발생 횟수 계산 (dep_delay > 0 인 경우만)
delay_counts = df_fh[df_fh['dep_delay'] > 0].groupby('manufacturer')['dep_delay'].count()

# 전체 운항 대비 지연 비율 계산
total_flights = df_fh['manufacturer'].value_counts()
delay_rate = (delay_counts / total_flights).fillna(0) * 100  # 퍼센트 변환

# 데이터 정렬
delay_df = (
    pd.DataFrame({'Delay Count': delay_counts, 'Delay Rate (%)': delay_rate})
    .sort_values(by="Delay Count", ascending=False)
)

# 시각화
fig, ax1 = plt.subplots(figsize=(10, 3.7))

sns.barplot(x=delay_df.index, y=delay_df["Delay Count"], palette="pastel", ax=ax1)
ax1.set_ylabel("Number of Delays", fontsize=12)
ax1.set_xlabel("Manufacturer", fontsize=12)
ax1.set_title("Number of Delays by Manufacturer", fontsize=14)
ax1.tick_params(axis="x", rotation=45)

# 지연 비율(%) 추가 (보조 축)
ax2 = ax1.twinx()
sns.lineplot(x=delay_df.index, y=delay_df["Delay Rate (%)"], marker="o", color="red", ax=ax2)
ax2.set_ylabel("Delay Rate (%)", fontsize=12)
ax2.grid(False)

plt.show()

```


## 4. 결론 정리


```{python}

#|echo : false

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# 다크그레이 HEX 코드 설정
dark_gray = '#A9A9A9'

# 시각화: 4개의 서브플롯 생성
fig, axes = plt.subplots(2, 2, figsize=(14, 6.5))

# (1) 제조사별 지연 평균 그래프
sns.barplot(x=manufacturer_stats.index, y=manufacturer_stats['mean'], ax=axes[0, 0], 
            palette=['red' if x == 'BOEING' else ('gray' if i == 1 else dark_gray) for i, x in enumerate(manufacturer_stats.index)])
axes[0, 0].axhline(mean_avg, color='black', linestyle='--', label=f'Mean Avg: {mean_avg:.1f}')
axes[0, 0].set_title('Aircraft Manufacturer Delay (Mean)')
axes[0, 0].set_ylabel('Average Delay (minutes)')
axes[0, 0].legend()

# (2) 제조사별 지연 중앙값 그래프
sns.barplot(x=manufacturer_stats.index, y=manufacturer_stats['median'], ax=axes[0, 1], 
            palette=['red' if x == 'BOEING' else ('gray' if i == 1 else dark_gray) for i, x in enumerate(manufacturer_stats.index)])
axes[0, 1].axhline(median_avg, color='black', linestyle='--', label=f'Median Avg: {median_avg:.1f}')
axes[0, 1].set_title('Aircraft Manufacturer Delay (Median)')
axes[0, 1].set_ylabel('Median Delay (minutes)')
axes[0, 1].legend()

# (3) 제조사별 운항 횟수 파이차트
axes[1, 0].pie(manufacturer_counts, labels=labels, autopct='%1.1f%%', startangle=140, 
               colors=['red' if i == 0 else ('gray' if i == 1 else dark_gray) for i in range(len(manufacturer_counts))])
axes[1, 0].set_title('Aircraft Manufacturer Distribution for Our Airline')

# (4) 지연 발생 횟수 및 비율 그래프
sns.barplot(x=delay_df.index, y=delay_df["Delay Count"], ax=axes[1, 1], 
            palette=['red' if x == 'BOEING' else ('gray' if i == 1 else dark_gray) for i, x in enumerate(delay_df.index)])
axes[1, 1].set_ylabel("Number of Delays")
axes[1, 1].set_title("Number of Delays by Manufacturer")

# 지연 비율(%) 추가 (보조 축)
ax2 = axes[1, 1].twinx()
sns.lineplot(x=delay_df.index, y=delay_df["Delay Rate (%)"], marker="o", color="black", ax=ax2)
ax2.set_ylabel("Delay Rate (%)")
ax2.grid(False)

plt.tight_layout()
plt.show()

```
# 
1. 제조사별 평균 지연 시간, 중앙값은 비슷하다.
2. 우리 항공사가 운행하는 비행기의 제조사 비율은 보잉이 72.2로 압도적이다. 
3. 또 제조사별 지연 발생 빈도를 분석했을 때 보잉사의 비행기가 42%로 가장 높은 비율을 보여준다. 
4. 따라서 우리는 한정된 자원으로 효율적인 항공사 운행을 위해서 
5. 공항에 보잉사 정비 요원을 더 많이 배치하여, 예방 정비를 철지히 하도록 해야한다. 
6. 아니면 발생 빈도를 바탕으로 3개의 회사별 비용을 산정하여 배분다. 