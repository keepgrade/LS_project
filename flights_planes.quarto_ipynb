{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"'nycflights13' 보고서\"\n",
        "title-slide-attributes: \n",
        "  data-background-image: images/ua_dep.png\n",
        "  data-background-size: cover\n",
        "  data-background-opacity: \"0.5\"  # 배경 투명도 조절\n",
        "  data-font-size: 48px  # 🔥 기본 글자 크기 조절 (제목, 부제목, 저자 포함)\n",
        "author: \"Team F5 : 정의주, 한지수, 신태선\"\n",
        "subtitle: \"UA 항공의 제조사별 출발 지연 분석\"\n",
        "format:\n",
        "  revealjs:\n",
        "    footer: \"© 2025 Team F5\"\n",
        "    logo: \"images/logo.png\"\n",
        "    slide-number: true\n",
        "    theme: night  # 내장 테마 적용\n",
        "css: styles.css  # 🔥 CSS 파일 적용\n",
        "---\n",
        "\n",
        "# 상황 설정\n",
        "![](./images/UA.png)\n"
      ],
      "id": "f83a8b03"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from nycflights13 import flights, planes\n",
        "\n",
        "flight = flights.groupby('carrier')['flight'].nunique().reset_index()\n",
        "flight = flight.sort_values(by='flight', ascending=False)\n",
        "\n",
        "# 데이터 정렬\n",
        "flight_sorted = flights.sort_values(by='flight', ascending=False)\n",
        "\n",
        "# 시각화\n",
        "plt.figure(figsize=(10, 6))  # 그래프 크기 조정\n",
        "plt.bar(flight_sorted['carrier'], flight_sorted['flight'], color='skyblue')\n",
        "\n",
        "# 제목 및 축 레이블 설정\n",
        "plt.xlabel(\"Airline\", fontsize=15, fontweight='bold')\n",
        "plt.ylabel(\"Number of Flights\", fontsize=15, fontweight='bold')\n",
        "plt.title(\"Number of Flights by Airline\", fontsize=20, fontweight='bold')\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()"
      ],
      "id": "68376d85",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# 1. 운항 지연 분석 배경\n",
        "\n",
        "![](./images/catoon.png){width=700 height=700}\n",
        "\n",
        "\n",
        "# 분석 목표\n",
        "\n",
        "어떤 제조사의 기체가 지연을 자주 유발하는지 확인 후 운항 효율성 개선\n",
        "\n",
        "\n",
        "# 2. 데이터 분비 및 전처리\n",
        "\n",
        "2.1 사용하는 Python 라이브러리\n"
      ],
      "id": "df9d7c5a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from nycflights13 import flights, planes"
      ],
      "id": "d093e4a1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "flights.info()\n",
        "planes.info()"
      ],
      "id": "bfa1e863",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# 2.2 데이터 병합\n",
        "\n",
        "- 두 데이터를 tailnum(기체 등록번호) 기준으로 병합하여 기체별 제조사 정보를 결합"
      ],
      "id": "dc202cc5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# tailnum을 key로 merge 하기 \n",
        "df = pd.merge(flights, planes, on = 'tailnum', how='left')\n",
        "df.info()"
      ],
      "id": "5c408578",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# 2.2 날짜 및 시간 데이터 생성 \n",
        "연(year_x), 월(month), 일(day), 시(hour), 분(minute) 데이터를 조합하여 date_time 생성\n",
        "2013년 1월~6월(상반기) 데이터를 필터링"
      ],
      "id": "1e54441d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df['date_time'] = pd.to_datetime(df['year_x'].astype(str) + '-' + df['month'].astype(str) + '-' + df['day'].astype(str) + ' ' + df['hour'].astype(str) + ':' + df['minute'].astype(str))\n",
        "df_fh = df[(df['date_time'] >= '2013-01-01') & (df['date_time'] <= '2013-06-30')]"
      ],
      "id": "38951bb8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# 2.3 지연시간 관련 전처리\n",
        " 음수 도착 지연 시간 제거 (빠른 이륙은 지연 원인이 아니므로 분석 제외)\n",
        " 제조사별 운항 횟수 확인\n",
        " 우리는 운항이 가장 많은 항공사야 우리 항공사를 골라줘 \n",
        "\n",
        " - 항공사별 운항 횟수 집계"
      ],
      "id": "2d7a76df"
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        " top_airline = df_fh['carrier'].value_counts().idxmax()  # 운항 횟수가 가장 많은 항공사 선택\n",
        "\n",
        "df_fh_our_airline = df_fh[df_fh['carrier'] == top_airline]  # 우리 항공사의 데이터만 필터링\n",
        "df_fh_our_airline = df_fh_our_airline[df_fh_our_airline['dep_delay'] >= 0]  # 음수 제거\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "# 우리 항공사의 상위 5개 제조사 선정\n",
        "\n",
        "\n",
        "```{python}\n",
        "top_5_manufacturers = df_fh_our_airline['manufacturer'].value_counts().head(5).index\n",
        "```\n",
        "\n",
        "\n",
        "# 어차피 3개밖에 안쓰는구나 \n",
        "\n",
        "\n",
        "```{python}\n",
        "set(df_fh_our_airline['manufacturer'])\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "# 제조사별 운항 횟수 집계\n",
        "\n",
        "\n",
        "```{python}\n",
        "manufacturer_counts = df_fh_our_airline['manufacturer'].value_counts()\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "# 원형 그래프 (파이 차트) 생성\n",
        "\n",
        "\n",
        "```{python}\n",
        "plt.figure(figsize=(8, 8))\n",
        "plt.pie(manufacturer_counts, labels=manufacturer_counts.index, autopct='%1.1f%%', startangle=140, colors=sns.color_palette('pastel'))\n",
        "plt.title('Aircraft Manufacturer Distribution for Our Airline')\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "# 3. 제조사별 운항 지연 분석\n",
        "# 3.1 제조사별 평균 지연 시간\n",
        "\n",
        "# 이상치 제거를 위한 IQR(Interquartile Range) 계산\n",
        "\n",
        "\n",
        "```{python}\n",
        "Q1 = df_fh_our_airline['dep_delay'].quantile(0.25)\n",
        "Q3 = df_fh_our_airline['dep_delay'].quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "# 정상 범위 설정 (IQR 범위 내 데이터만 유지)\n",
        "\n",
        "\n",
        "```{python}\n",
        "lower_bound = Q1 - 1.5 * IQR\n",
        "upper_bound = Q3 + 1.5 * IQR\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "# 이상치 제거\n",
        "\n",
        "\n",
        "```{python}\n",
        "df_fh_our_airline = df_fh_our_airline[(df_fh_our_airline['dep_delay'] >= lower_bound) & (df_fh_our_airline['dep_delay'] <= upper_bound)]\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# - 제조사별 평균 지연 시간 및 표준편차 확인\n",
        "\n",
        "\n",
        "```{python}\n",
        "df_fh_our_airline.groupby('manufacturer')['dep_delay'].describe()\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "# 3.2 제조사별 운항 횟수 대비 지연 비율\n",
        "# - 단순 평균 지연 시간 비교가 아닌, 운항 횟수 대비 지연 발생 비율 계산\n",
        "\n",
        "\n",
        "```{python}\n",
        "delay_rate = df_fh_our_airline.groupby('manufacturer')['dep_delay'].count() /df_fh_our_airline['manufacturer'].value_counts()\n",
        "\n",
        "delay_rate.sort_values(ascending=False)\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# 3.3 제조사별 이륙 vs. 도착 지연 비교\n",
        "# - 특정 제조사의 기체에서 이륙 지연이 많은지, 운항 중 추가 지연이 발생하는지 분석\n",
        "\n",
        "\n",
        "```{python}\n",
        "df_fh_our_airline.groupby('manufacturer')[['dep_delay']].mean()\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# 3.4 월별 지연 패턴 분석\n",
        "# - 제조사별 월별 평균 도착 지연 분석\n",
        "\n",
        "\n",
        "```{python}\n",
        "df_fh_our_airline['month'] = df_fh_our_airline['date_time'].dt.month\n",
        "monthly_delay = df_fh_our_airline.groupby(['manufacturer', 'month'])['arr_delay'].mean().unstack()\n",
        "monthly_delay\n",
        "\n",
        "plt.figure(figsize=(12,10))\n",
        "monthly_delay = df_fh_our_airline.groupby(['manufacturer', 'month'])['dep_delay'].mean().unstack()\n",
        "\n",
        "sns.lineplot(data=monthly_delay.T, marker=\"o\")\n",
        "plt.xlabel(\"Month\")\n",
        "plt.ylabel(\"Average Delay (minutes)\")\n",
        "plt.title(\"Monthly Average Delay by Manufacturer\")\n",
        "plt.legend(title=\"Manufacturer\")\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# 4. 데이터 시각화\n",
        "# 4.1 제조사별 도착 지연 시간 분포 \n",
        "\n",
        "# 제조사별 평균 지연 시간 비교\n",
        "\n",
        "\n",
        "```{python}\n",
        "mean_delays = df_fh_our_airline.groupby('manufacturer')['dep_delay'].mean().sort_values()\n",
        "\n",
        "plt.figure(figsize=(10,5))\n",
        "mean_delays.plot(kind='bar', color='skyblue')\n",
        "plt.xlabel('Manufacturer')\n",
        "plt.ylabel('Mean Departure Delay (minutes)')\n",
        "plt.title('Mean Departure Delay by Manufacturer (Jan-Jun 2013)')\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "# 4.2 제조사별 이륙 vs. 도착 지연 비교 (가로 막대 그래프)\n",
        "\n",
        "\n",
        "```{python}\n",
        "delay_comparison = df_fh_our_airline.groupby('manufacturer')[['dep_delay', 'arr_delay']].mean()\n",
        "\n",
        "delay_comparison.plot(kind='barh', figsize=(12,6), color=['royalblue', 'tomato'])\n",
        "plt.xlabel('Mean Delay (minutes)')\n",
        "plt.ylabel('Manufacturer')\n",
        "plt.title('Mean Departure vs. Arrival Delay by Manufacturer (Jan-Jun 2013)')\n",
        "plt.legend(['Departure Delay', 'Arrival Delay'])\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# 4.3 3차원 데이터 분석을 통해서 보기 \n",
        "# 제조사별 평균 이륙 지연, 도착 지연 및 운행 대수 데이터 준비\n",
        "\n",
        "\n",
        "```{python}\n",
        "delay_comparison = df_fh_our_airline.groupby('manufacturer')[['dep_delay', 'arr_delay']].mean()\n",
        "manufacturer_flight_counts = df_fh_our_airline['manufacturer'].value_counts()\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "# 데이터 병합\n",
        "\n",
        "\n",
        "```{python}\n",
        "delay_comparison['flight_count'] = manufacturer_flight_counts\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "# 3D 그래프 생성\n",
        "\n",
        "\n",
        "```{python}\n",
        "fig = plt.figure(figsize=(12, 8))\n",
        "ax = fig.add_subplot(111, projection='3d')\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "# x, y, z 좌표 설정\n",
        "\n",
        "\n",
        "```{python}\n",
        "x_labels = delay_comparison.index  # 제조사 목록\n",
        "x = np.arange(len(x_labels))  # x축 인덱스 (제조사별)\n",
        "y_dep = delay_comparison['dep_delay']  # 이륙 지연\n",
        "y_arr = delay_comparison['arr_delay']  # 도착 지연\n",
        "z = delay_comparison['flight_count']  # 운행 대수\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "# 막대 너비 설정\n",
        "\n",
        "\n",
        "```{python}\n",
        "bar_width = 0.3\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "# 3D 막대 그래프 형태로 시각화 (조금 더 정교한 스타일 적용)\n",
        "\n",
        "\n",
        "```{python}\n",
        "ax.bar(x - bar_width, y_dep, zs=z, zdir='y', color='royalblue', alpha=0.8, width=bar_width, label='Departure Delay')\n",
        "ax.bar(x + bar_width, y_arr, zs=z, zdir='y', color='tomato', alpha=0.8, width=bar_width, label='Arrival Delay')\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "# 축 설정 및 시각적 개선\n",
        "\n",
        "\n",
        "```{python}\n",
        "ax.set_xlabel('Manufacturer', fontsize=12, labelpad=15, color = 'red')\n",
        "ax.set_ylabel('Total Flights Operated', fontsize=12, labelpad=15)\n",
        "ax.set_zlabel('Mean Delay (minutes)', fontsize=12, labelpad=15)\n",
        "ax.set_xticks(x)\n",
        "ax.set_xticklabels(x_labels, rotation=45, fontsize=10, ha='right')\n",
        "ax.set_title('3D Visualization of Mean Departure & Arrival Delay by Manufacturer', fontsize=14, pad=20)\n",
        "ax.view_init(elev=20, azim=120)  # 시점 조정\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "# 범례 추가\n",
        "\n",
        "\n",
        "```{python}\n",
        "ax.legend()\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "# 그래프 출력\n",
        "\n",
        "\n",
        "```{python}\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# 5. 결론 및 운영 개선 방안"
      ],
      "id": "10f5d186"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\USER\\.conda\\envs\\ls_jisu\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}